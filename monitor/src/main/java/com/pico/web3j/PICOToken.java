package com.pico.web3j;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class PICOToken extends Contract {
    private static final String BINARY = "608060405260405162002c6138038062002c61833981018060405260c08110156200002957600080fd5b8101908080516401000000008111156200004257600080fd5b820160208101848111156200005657600080fd5b81516401000000008111828201871017156200007157600080fd5b505092919060200180516401000000008111156200008e57600080fd5b82016020810184811115620000a257600080fd5b8151640100000000811182820187101715620000bd57600080fd5b50506020808301516040840151606085015160809095015160038054600160a060020a031916331790558851949750919550939290916200010491600491890190620009dc565b5084516200011a906005906020880190620009dc565b506006805460ff191660ff86161768ffffffff00000000001916670f42400000000000179055600063ffffffff83161180156200016b575060065463ffffffff650100000000009091048116908316105b15156200017757600080fd5b600083116200018557600080fd5b600034116200019357600080fd5b6006805464ffffffff00191661010063ffffffff8516021790819055600782905534600855600060095560ff16600a0a620001dd8482640100000000620009a98102620011b71704565b6001555050701c35fedd14ffffffffffffffffffffffff602a555050701b0ce43b323fffffffffffffffffffffff602b5550507019f0028ec1ffffffffffffffffffffffff602c55507018ded91f0e7fffffffffffffffffffffff602d557017d8ec7f0417ffffffffffffffffffffff602e557016ddc6556cdbffffffffffffffffffffff602f557015ecf52776a1ffffffffffffffffffffff6030557015060c256cb2ffffffffffffffffffffff603155701428a2f98d72ffffffffffffffffffffff6032557013545598e5c23fffffffffffffffffffff603355701288c4161ce1dfffffffffffffffffffff6034557011c592761c666fffffffffffffffffffff60355570110a688680a757ffffffffffffffffffff603655701056f1b5bedf77ffffffffffffffffffff603755700faadceceeff8bffffffffffffffffffff603855700f05dc6b27edadffffffffffffffffffff603955700e67a5a25da4107fffffffffffffffffff603a55700dcff115b14eedffffffffffffffffffff603b55700d3e7a392431239fffffffffffffffffff603c55700cb2ff529eb71e4fffffffffffffffffff603d55700c2d415c3db974afffffffffffffffffff603e55700bad03e7d883f69bffffffffffffffffff603f55700b320d03b2c343d5ffffffffffffffffff604055700abc25204e02828dffffffffffffffffff604155700a4b16f74ee4bb207fffffffffffffffff6042557009deaf736ac1f569ffffffffffffffffff604355700976bd9952c7aa957fffffffffffffffff6044557009131271922eaa606fffffffffffffffff6045557008b380f3558668c46fffffffffffffffff604655700857ddf0117efa215bffffffffffffffff6047556001608360020a036048557007abbf6f6abb9d087fffffffffffffffff60495570075af62cbac95f7dfa7fffffffffffffff604a5570070d7fb7452e187ac13fffffffffffffff604b557006c3390ecc8af379295fffffffffffffff604c5570067c00a3b07ffc01fd6fffffffffffffff604d55700637b647c39cbb9d3d27ffffffffffffff604e557005f63b1fc104dbd39587ffffffffffffff604f557005b771955b36e12f7235ffffffffffffff60505570057b3d49dda84556d6f6ffffffffffffff60515570054183095b2c8ececf30ffffffffffffff60525570050a28be635ca2b888f77fffffffffffff6053557004d5156639708c9db33c3fffffffffffff6054557004a23105873875bd52dfdfffffffffffff605555700471649d87199aa990756fffffffffffff6056557004429a21a029d4c1457cfbffffffffffff605755700415bc6d6fb7dd71af2cb3ffffffffffff6058557003eab73b3bbfe282243ce1ffffffffffff6059557003c1771ac9fb6b4c18e229ffffffffffff605a55700399e96897690418f785257fffffffffff605b55700373fc456c53bb779bf0ea9fffffffffff605c5570034f9e8e490c48e67e6ab8bfffffffffff605d5570032cbfd4a7adc790560b3337ffffffffff605e5570030b50570f6e5d2acca94613ffffffffff605f557002eb40f9f620fda6b56c2861ffffffffff6060557002cc8340ecb0d0f520a6af58ffffffffff6061557002af09481380a0a35cf1ba02ffffffffff606255700292c5bdd3b92ec810287b1b3fffffffff606355700277abdcdab07d5a77ac6d6b9fffffffff60645570025daf6654b1eaa55fd64df5efffffffff606555700244c49c648baa98192dce88b7ffffffff60665570022ce03cd5619a311b2471268bffffffff606755700215f77c045fbe885654a44a0fffffffff6068556001608160020a036069557001eaefdbdaaee7421fc4d3ede5ffffffff606a557001d6bd8b2eb257df7e8ca57b09bfffffff606b557001c35fedd14b861eb0443f7f133fffffff606c557001b0ce43b322bcde4a56e8ada5afffffff606d5570019f0028ec1fff007f5a195a39dfffffff606e5570018ded91f0e72ee74f49b15ba527ffffff606f5570017d8ec7f04136f4e5615fd41a63ffffff60705570016ddc6556cdb84bdc8d12d22e6fffffff60715570015ecf52776a1155b5bd8395814f7fffff60725570015060c256cb23b3b3cc3754cf40ffffff6073557001428a2f98d728ae223ddab715be3fffff60745570013545598e5c23276ccf0ede68034fffff6075557001288c4161ce1d6f54b7f61081194fffff60765570011c592761c666aa641d5a01a40f17ffff607755700110a688680a7530515f3e6e6cfdcdffff6078557001056f1b5bedf75c6bcb2ce8aed428ffff6079556ffaadceceeff8a0890f3875f008277fff607a556ff05dc6b27edad306388a600f6ba0bfff607b556fe67a5a25da41063de1495d5b18cdbfff607c556fdcff115b14eedde6fc3aa5353f2e4fff607d556fd3e7a3924312399f9aae2e0f868f8fff607e556fcb2ff529eb71e41582cccd5a1ee26fff607f556fc2d415c3db974ab32a51840c0b67edff6080556fbad03e7d883f69ad5b0a186184e06bff6081556fb320d03b2c343d4829abd6075f0cc5ff6082556fabc25204e02828d73c6e80bcdb1a95bf6083556fa4b16f74ee4bb2040a1ec6c15fbbf2df6084556f9deaf736ac1f569deb1b5ae3f36c130f6085556f976bd9952c7aa957f5937d790ef650376086556f9131271922eaa6064b73a22d0bd4f2bf6087556f8b380f3558668c46c91c49a2f8e967b96088556f857ddf0117efa215952912839f6473e660895562000a81565b6000821515620009bc57506000620009d6565b50818102818382811515620009cd57fe5b0414620009d657fe5b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000a1f57805160ff191683800117855562000a4f565b8280016001018555821562000a4f579182015b8281111562000a4f57825182559160200191906001019062000a32565b5062000a5d92915062000a61565b5090565b62000a7e91905b8082111562000a5d576000815560010162000a68565b90565b6121d08062000a916000396000f3fe6080604052600436106101315763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662c0ca26811461013657806306fdde031461015d578063095ea7b3146101e7578063117803e31461023457806317e34a501461026557806318160ddd1461029357806323b872dd146102a85780632ceb8734146102eb578063313ce567146103005780634c68df671461032b578063661884631461034057806370a082311461037957806384127535146103ac57806395d89b41146103e5578063a9059cbb146103fa578063b9b8c24614610433578063cd0567f514610461578063d73dd62314610476578063da360541146104af578063dd62ed3e146104e8578063eb91d37e14610523578063f3fef3a314610538578063f669795214610571575b600080fd5b34801561014257600080fd5b5061014b610586565b60408051918252519081900360200190f35b34801561016957600080fd5b5061017261058c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ac578181015183820152602001610194565b50505050905090810190601f1680156101d95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f357600080fd5b506102206004803603604081101561020a57600080fd5b50600160a060020a03813516906020013561061a565b604080519115158252519081900360200190f35b34801561024057600080fd5b506102496106bd565b60408051600160a060020a039092168252519081900360200190f35b34801561027157600080fd5b5061027a6106cc565b6040805163ffffffff9092168252519081900360200190f35b34801561029f57600080fd5b5061014b6106e1565b3480156102b457600080fd5b50610220600480360360608110156102cb57600080fd5b50600160a060020a038135811691602081013590911690604001356106e7565b3480156102f757600080fd5b5061014b61084c565b34801561030c57600080fd5b50610315610852565b6040805160ff9092168252519081900360200190f35b34801561033757600080fd5b5061014b61085b565b34801561034c57600080fd5b506102206004803603604081101561036357600080fd5b50600160a060020a038135169060200135610861565b34801561038557600080fd5b5061014b6004803603602081101561039c57600080fd5b5035600160a060020a0316610951565b3480156103b857600080fd5b5061014b600480360360408110156103cf57600080fd5b50600160a060020a038135169060200135610970565b3480156103f157600080fd5b50610172610a10565b34801561040657600080fd5b506102206004803603604081101561041d57600080fd5b50600160a060020a038135169060200135610a6b565b61045f6004803603604081101561044957600080fd5b50600160a060020a038135169060200135610b3a565b005b34801561046d57600080fd5b5061014b610ce1565b34801561048257600080fd5b506102206004803603604081101561049957600080fd5b50600160a060020a038135169060200135610ce7565b3480156104bb57600080fd5b5061014b600480360360408110156104d257600080fd5b50600160a060020a038135169060200135610d80565b3480156104f457600080fd5b5061014b6004803603604081101561050b57600080fd5b50600160a060020a0381358116916020013516610e1b565b34801561052f57600080fd5b5061014b610e46565b34801561054457600080fd5b5061045f6004803603604081101561055b57600080fd5b50600160a060020a038135169060200135610e9e565b34801561057d57600080fd5b5061027a611006565b60075490565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106125780601f106105e757610100808354040283529160200191610612565b820191906000526020600020905b8154815290600101906020018083116105f557829003601f168201915b505050505081565b600081158061064a5750336000908152600260209081526040808320600160a060020a0387168452909152902054155b151561065557600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b600354600160a060020a031681565b60065465010000000000900463ffffffff1681565b60015490565b6000600160a060020a03831615156106fe57600080fd5b600160a060020a03841660009081526020819052604090205482111561072357600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561075357600080fd5b600160a060020a03841660009081526020819052604090205461077c908363ffffffff61101716565b600160a060020a0380861660009081526020819052604080822093909355908516815220546107b1908363ffffffff61102916565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546107f3908363ffffffff61101716565b600160a060020a0380861660008181526002602090815260408083203384528252918290209490945580518681529051928716939192600080516020612185833981519152929181900390910190a35060019392505050565b60075481565b60065460ff1681565b60085481565b336000908152600260209081526040808320600160a060020a0386168452909152812054808311156108b657336000908152600260209081526040808320600160a060020a03881684529091528120556108eb565b6108c6818463ffffffff61101716565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a0381166000908152602081905260409020545b919050565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523360048201529051600091600160a060020a038516916370a0823191602480820192602092909190829003018186803b1580156109d357600080fd5b505afa1580156109e7573d6000803e3d6000fd5b505050506040513d60208110156109fd57600080fd5b50610a09905082611036565b9392505050565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106125780601f106105e757610100808354040283529160200191610612565b6000600160a060020a0383161515610a8257600080fd5b33600090815260208190526040902054821115610a9e57600080fd5b33600090815260208190526040902054610abe908363ffffffff61101716565b3360009081526020819052604080822092909255600160a060020a03851681522054610af0908363ffffffff61102916565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233926000805160206121858339815191529281900390910190a350600192915050565b60003411610b4757600080fd5b600160a060020a0382161515610b5c57600080fd5b34818114610b6957600080fd5b6000610b7482611036565b90506000610b838260016110f3565b90506000610b918483611017565b9050610b9f60085483611029565b600855600154610baf9084611029565b600155600954610bbf9082611029565b60095533600090815260208190526040902054610bdc9084611029565b33600090815260208190526040808220929092556003549151600160a060020a03909216916108fc84150291849190818181858888f19350505050158015610c28573d6000803e3d6000fd5b506040805184815290517f0ff70e913721268f674352b5efa2e7268fcc191c80983d3fdf95fb474768b4689181900360200190a1604080518481529051339130916000805160206121858339815191529181900360200190a3604080518581529051309133916000805160206121858339815191529181900360200190a3600354604080518381529051600160a060020a03909216913091600080516020612185833981519152919081900360200190a3505050505050565b60095481565b336000908152600260209081526040808320600160a060020a0386168452909152812054610d1b908363ffffffff61102916565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523360048201529051600091600160a060020a038516916370a0823191602480820192602092909190829003018186803b158015610de357600080fd5b505afa158015610df7573d6000803e3d6000fd5b505050506040513d6020811015610e0d57600080fd5b50610a0990508260016110f3565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6008546006546000918291610e6a919065010000000000900463ffffffff166111b7565b600154600654919250600091610e8b9190610100900463ffffffff166111b7565b9050610e9782826111e0565b9250505090565b600081118015610eb55750610eb233610951565b81105b1515610ec057600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a038416916370a08231916024808301926020929190829003018186803b158015610f1f57600080fd5b505afa158015610f33573d6000803e3d6000fd5b505050506040513d6020811015610f4957600080fd5b508190506000610f5982826110f3565b9050610f6760015483611017565b600155600854610f779082611017565b600855604051339082156108fc029083906000818181858888f19350505050158015610fa7573d6000803e3d6000fd5b50604080518281529051339130916000805160206121858339815191529181900360200190a36040805183815290517fd83c63197e8e676d80ab0122beba9a9d20f3828839e9a1d6fe81d242e9cd7e6e9181900360200190a150505050565b600654610100900463ffffffff1681565b60008282111561102357fe5b50900390565b818101828110156106b757fe5b60008060015411801561104b57506000600854115b151561105657600080fd5b8115156110655750600061096b565b600080600061108661107986600854611029565b611081610586565b611029565b90506000611098600854611081610586565b6006549091506110c2908390839063ffffffff6101008204811691650100000000009004166111f5565b809450819550505060008360ff166110dc600154876111b7565b60015460029290920a900403979650505050505050565b60015460009083111561110557600080fd5b8115156111275733600090815260208190526040902054831461112757600080fd5b821515611136575060006106b7565b60015483141561114957506008546106b7565b60015460065460009182918682039161117a91839063ffffffff6501000000000082048116916101009004166111f5565b600854919450925060009061118f90856111b7565b60085490915060ff841660020a02848183038115156111aa57fe5b0498975050505050505050565b60008215156111c8575060006106b7565b508181028183828115156111d857fe5b04146106b757fe5b600081838115156111ed57fe5b049392505050565b600080700200000000000000000000000000000000861061121557600080fd5b60008086607f60020a890281151561122957fe5b04905070015bf0a8b1457695355fb8ac404e7a79e38110156112555761124e816112e8565b9150611261565b61125e8161170d565b91505b60008563ffffffff168763ffffffff16840281151561127c57fe5b0490507008000000000000000000000000000000008110156112af576112a1816117db565b607f945094505050506112df565b60006112ba82611be8565b90506112d260ff607f8390031660020a830482611c78565b955093506112df92505050565b94509492505050565b6000808080806fd3094c70f034de4b96ff7d5b6f99fcd88610611337576f4000000000000000000000000000000093909301926fd3094c70f034de4b96ff7d5b6f99fcd8607f60020a87020495505b6fa45af1e1f40c333b3de1db4dd55f29a78610611380576f2000000000000000000000000000000093909301926fa45af1e1f40c333b3de1db4dd55f29a7607f60020a87020495505b6f910b022db7ae67ce76b441c27035c6a186106113c9576f1000000000000000000000000000000093909301926f910b022db7ae67ce76b441c27035c6a1607f60020a87020495505b6f88415abbe9a76bead8d00cf112e4d4a88610611412576f0800000000000000000000000000000093909301926f88415abbe9a76bead8d00cf112e4d4a8607f60020a87020495505b6f84102b00893f64c705e841d5d4064bd3861061145b576f0400000000000000000000000000000093909301926f84102b00893f64c705e841d5d4064bd3607f60020a87020495505b6f8204055aaef1c8bd5c3259f4822735a286106114a4576f0200000000000000000000000000000093909301926f8204055aaef1c8bd5c3259f4822735a2607f60020a87020495505b6f810100ab00222d861931c15e39b44e9986106114ed576f0100000000000000000000000000000093909301926f810100ab00222d861931c15e39b44e99607f60020a87020495505b6f808040155aabbbe9451521693554f7338610611535576e80000000000000000000000000000093909301926f808040155aabbbe9451521693554f733607f60020a87020495505b6f7fffffffffffffffffffffffffffffff1986019250829150607f60020a8280020490507001000000000000000000000000000000008381038302049390930192607f60020a8282020491507002000000000000000000000000000000006faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8490038302049390930192607f60020a8282020491507003000000000000000000000000000000006f999999999999999999999999999999998490038302049390930192607f60020a8282020491507004000000000000000000000000000000006f924924924924924924924924924924928490038302049390930192607f60020a8282020491507005000000000000000000000000000000006f8e38e38e38e38e38e38e38e38e38e38e8490038302049390930192607f60020a8282020491507006000000000000000000000000000000006f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b8490038302049390930192607f60020a8282020491507007000000000000000000000000000000006f89d89d89d89d89d89d89d89d89d89d898490038302049390930192607f60020a8282020491507008000000000000000000000000000000006f888888888888888888888888888888888490038302049390930195945050505050565b600080700100000000000000000000000000000000831061174f576000611739607f60020a850461211a565b60ff16600281900a90940493607f60020a029150505b607f60020a8311156117af57607f5b60008160ff1611156117ad57607f60020a84800204935070010000000000000000000000000000000084106117a4576002938490049360ff600019830116900a91909101905b6000190161175e565b505b6f05b9de1d10bf4103d647b0955897ba806f03f80fe03f80fe03f80fe03f80fe03f88202049392505050565b6000670168244fdac78000607f60020a6f0fffffffffffffffffffffffffffffff84168080028290048082028390048083028490049485026710e1b3be415a00009092026705a0913f6b1e000091909102010192909181830204905080664807432bc180000283019250607f60020a82820281151561185657fe5b04905080660c0135dca040000283019250607f60020a82820281151561187857fe5b049050806601b707b1cdc0000283019250607f60020a82820281151561189a57fe5b049050806536e0f639b8000283019250607f60020a8282028115156118bb57fe5b04905080650618fee9f8000283019250607f60020a8282028115156118dc57fe5b04905080649c197dcc000283019250607f60020a8282028115156118fc57fe5b04905080640e30dce4000283019250607f60020a82820281151561191c57fe5b0490508064012ebd13000283019250607f60020a82820281151561193c57fe5b049050806317499f000283019250607f60020a82820281151561195b57fe5b049050806301a9d4800283019250607f60020a82820281151561197a57fe5b04905080621c63800283019250607f60020a82820281151561199857fe5b049050806201c6380283019250607f60020a8282028115156119b657fe5b04905080611ab80283019250607f60020a8282028115156119d357fe5b0490508061017c0283019250607f60020a8282028115156119f057fe5b0490508060140283019250607f60020a828202811515611a0c57fe5b6721c3677c82b40000919004938401048201607f60020a019290506f10000000000000000000000000000000851615611a695770018ebef9eac820ae8682b9793ac6d1e7767001c3d6a24ed82218787d624d3e5eba95f984020492505b6f20000000000000000000000000000000851615611aab577001368b2fc6f9609fe7aceb46aa619baed470018ebef9eac820ae8682b9793ac6d1e77884020492505b6f40000000000000000000000000000000851615611aec576fbc5ab1b16779be3575bd8f0520a9f21f7001368b2fc6f9609fe7aceb46aa619baed584020492505b607f60020a851615611b20576f454aaa8efe072e7f6ddbab84b40a55c96fbc5ab1b16779be3575bd8f0520a9f21e84020492505b700100000000000000000000000000000000851615611b61576f0960aadc109e7a3bf4578099615711ea6f454aaa8efe072e7f6ddbab84b40a55c584020492505b700200000000000000000000000000000000851615611ba1576e2bf84208204f5977f9a8cf01fdce3d6f0960aadc109e7a3bf4578099615711d784020492505b700400000000000000000000000000000000851615611bdf576d03c6ab775dd0b95b4cbee7e65d116e2bf84208204f5977f9a8cf01fdc30784020492505b50909392505050565b60006020607f5b8060ff168260010160ff161015611c37576000600260ff8484011604905084600a60ff831660808110611c1e57fe5b015410611c2d57809250611c31565b8091505b50611bef565b83600a60ff831660808110611c4857fe5b015410611c5857915061096b9050565b83600a60ff841660808110611c6957fe5b0154106101315750905061096b565b60008083905060008090508360ff16858302908060020a82049150509150816f03442c4e6074a82f1797f72ac000000002810190508360ff16858302908060020a82049150509150816f0116b96f757c380fb287fd0e4000000002810190508360ff16858302908060020a82049150509150816e45ae5bdd5f0e03eca1ff439000000002810190508360ff16858302908060020a82049150509150816e0defabf91302cd95b9ffda5000000002810190508360ff16858302908060020a82049150509150816e02529ca9832b22439efff9b800000002810190508360ff16858302908060020a82049150509150816d54f1cf12bd04e516b6da8800000002810190508360ff16858302908060020a82049150509150816d0a9e39e257a09ca2d6db5100000002810190508360ff16858302908060020a82049150509150816d012e066e7b839fa050c30900000002810190508360ff16858302908060020a82049150509150816c1e33d7d926c329a1ad1a80000002810190508360ff16858302908060020a82049150509150816c02bee513bdb4a6b19b5f80000002810190508360ff16858302908060020a82049150509150816b3a9316fa79b88eccf2a0000002810190508360ff16858302908060020a82049150509150816b048177ebe1fa81237520000002810190508360ff16858302908060020a82049150509150816a5263fe90242dcbacf0000002810190508360ff16858302908060020a82049150509150816a057e22099c030d9410000002810190508360ff16858302908060020a82049150509150816957e22099c030d941000002810190508360ff16858302908060020a820491505091508169052b6b5456997631000002810190508360ff16858302908060020a8204915050915081684985f67696bf74800002810190508360ff16858302908060020a82049150509150816803dea12ea99e49800002810190508360ff16858302908060020a82049150509150816731880f2214b6e00002810190508360ff16858302908060020a820491505091508167025bcff56eb3600002810190508360ff16858302908060020a8204915050915081661b722e10ab100002810190508360ff16858302908060020a82049150509150816601317c7007700002810190508360ff16858302908060020a8204915050915081650cba84aafa0002810190508360ff16858302908060020a82049150509150816482573a0a0002810190508360ff16858302908060020a82049150509150816405035ad90002810190508360ff16858302908060020a8204915050915081632f881b0002810190508360ff16858302908060020a82049150509150816301b2934002810190508360ff16858302908060020a8204915050915081620efc4002810190508360ff16858302908060020a8204915050915081617fe002810190508360ff16858302908060020a820491505091508161042002810190508360ff16858302908060020a8204915050915081602102810190508360ff16858302908060020a8204915050915081600102810190508360ff1660019060020a02856f0688589cc0e9505e2f2fee55800000008381151561210e57fe5b04010195945050505050565b600080610100831015612144575b600183111561213f57600290920491600101612128565b6106b7565b60805b60008160ff16111561217d5760ff811660020a84106121705760ff811660020a90930492908117905b600260ff90911604612147565b509291505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820a8eb0c76c34244f21ef5674da12cef9a0ef65038d94b7f4ffd9f184c36bade7d0029";

    public static final String FUNC_GETTF = "getTF";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_OWNER = "OWNER";

    public static final String FUNC__DENOMINATOR = "_denominator";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TEAMFOUND = "teamFound";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_TOTALRESERVE = "totalReserve";

    public static final String FUNC_DECREASEAPPROVAL = "decreaseApproval";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETINVEST = "getInvest";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_INVEST = "invest";

    public static final String FUNC_TOTALTEAMFOUND = "totalTeamFound";

    public static final String FUNC_INCREASEAPPROVAL = "increaseApproval";

    public static final String FUNC_GETWITHDRAW = "getWithdraw";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_GETCURRENTPRICE = "getCurrentPrice";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC__CWEIGHT = "_cweight";

    public static final Event ISSUED_EVENT = new Event("Issued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event BURNED_EVENT = new Event("Burned", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected PICOToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PICOToken(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PICOToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PICOToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<BigInteger> getTF() {
        final Function function = new Function(FUNC_GETTF, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approve(String _spender, BigInteger _value) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> OWNER() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> _denominator() {
        final Function function = new Function(FUNC__DENOMINATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String _from, String _to, BigInteger _value) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> teamFound() {
        final Function function = new Function(FUNC_TEAMFOUND, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> totalReserve() {
        final Function function = new Function(FUNC_TOTALRESERVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> decreaseApproval(String _spender, BigInteger _subtractedValue) {
        final Function function = new Function(
                FUNC_DECREASEAPPROVAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_subtractedValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> balanceOf(String _owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getInvest(String _token, BigInteger _amount) {
        final Function function = new Function(FUNC_GETINVEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_token), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transfer(String _to, BigInteger _value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> invest(String _token, BigInteger _amount, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_INVEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_token), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> totalTeamFound() {
        final Function function = new Function(FUNC_TOTALTEAMFOUND, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> increaseApproval(String _spender, BigInteger _addedValue) {
        final Function function = new Function(
                FUNC_INCREASEAPPROVAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_addedValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getWithdraw(String _token, BigInteger _amount) {
        final Function function = new Function(FUNC_GETWITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_token), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> allowance(String _owner, String _spender) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.Address(_spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getCurrentPrice() {
        final Function function = new Function(FUNC_GETCURRENTPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> withdraw(String _token, BigInteger _amount) {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_token), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> _cweight() {
        final Function function = new Function(FUNC__CWEIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public List<IssuedEventResponse> getIssuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ISSUED_EVENT, transactionReceipt);
        ArrayList<IssuedEventResponse> responses = new ArrayList<IssuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IssuedEventResponse typedResponse = new IssuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<IssuedEventResponse> issuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, IssuedEventResponse>() {
            @Override
            public IssuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ISSUED_EVENT, log);
                IssuedEventResponse typedResponse = new IssuedEventResponse();
                typedResponse.log = log;
                typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<IssuedEventResponse> issuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ISSUED_EVENT));
        return issuedEventFlowable(filter);
    }

    public List<BurnedEventResponse> getBurnedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BURNED_EVENT, transactionReceipt);
        ArrayList<BurnedEventResponse> responses = new ArrayList<BurnedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BurnedEventResponse typedResponse = new BurnedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BurnedEventResponse> burnedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BurnedEventResponse>() {
            @Override
            public BurnedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BURNED_EVENT, log);
                BurnedEventResponse typedResponse = new BurnedEventResponse();
                typedResponse.log = log;
                typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BurnedEventResponse> burnedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BURNED_EVENT));
        return burnedEventFlowable(filter);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    @Deprecated
    public static PICOToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PICOToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PICOToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PICOToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PICOToken load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PICOToken(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PICOToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PICOToken(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PICOToken> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger initialWeiValue, String _name, String _symbol, BigInteger _decimals, BigInteger _total, BigInteger _cw, BigInteger _tf) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint8(_decimals), 
                new org.web3j.abi.datatypes.generated.Uint256(_total), 
                new org.web3j.abi.datatypes.generated.Uint32(_cw), 
                new org.web3j.abi.datatypes.generated.Uint256(_tf)));
        return deployRemoteCall(PICOToken.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor, initialWeiValue);
    }

    public static RemoteCall<PICOToken> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger initialWeiValue, String _name, String _symbol, BigInteger _decimals, BigInteger _total, BigInteger _cw, BigInteger _tf) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint8(_decimals), 
                new org.web3j.abi.datatypes.generated.Uint256(_total), 
                new org.web3j.abi.datatypes.generated.Uint32(_cw), 
                new org.web3j.abi.datatypes.generated.Uint256(_tf)));
        return deployRemoteCall(PICOToken.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor, initialWeiValue);
    }

    @Deprecated
    public static RemoteCall<PICOToken> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, String _name, String _symbol, BigInteger _decimals, BigInteger _total, BigInteger _cw, BigInteger _tf) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint8(_decimals), 
                new org.web3j.abi.datatypes.generated.Uint256(_total), 
                new org.web3j.abi.datatypes.generated.Uint32(_cw), 
                new org.web3j.abi.datatypes.generated.Uint256(_tf)));
        return deployRemoteCall(PICOToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    @Deprecated
    public static RemoteCall<PICOToken> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, String _name, String _symbol, BigInteger _decimals, BigInteger _total, BigInteger _cw, BigInteger _tf) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint8(_decimals), 
                new org.web3j.abi.datatypes.generated.Uint256(_total), 
                new org.web3j.abi.datatypes.generated.Uint32(_cw), 
                new org.web3j.abi.datatypes.generated.Uint256(_tf)));
        return deployRemoteCall(PICOToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static class IssuedEventResponse {
        public Log log;

        public BigInteger _amount;
    }

    public static class BurnedEventResponse {
        public Log log;

        public BigInteger _amount;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class TransferEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger value;
    }
}
